{"version":3,"sources":["src/app/auth/auth-routing.module.ts","src/app/auth/auth.module.ts","src/app/auth/auth.service.ts","src/app/auth/login/login.component.html","src/app/auth/login/login.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent }       from './login/login.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AngularMaterialModule } from '../angular-material/angular-material.module';\nimport { ReactiveFormsModule }    from '@angular/forms';\nimport { LoginComponent } from './login/login.component';\n\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    AngularMaterialModule,\n    ReactiveFormsModule\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AuthModule { }\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, delay, map } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) { }\r\n  isLoggedIn = false;\r\n\r\n  // store the URL so we can redirect after logging in\r\n  redirectUrl: string;\r\n\r\n  login(username: string, password: string) {\r\n      localStorage.setItem('code', this.b64EncodeUnicode(`${username}:${password}`))\r\n\r\n      const payload = new HttpParams()\r\n                      .set('grant_type', 'password')\r\n                      .set('username', username)\r\n                      .set('password', password);\r\n      return this.http.post<any>(environment.apiAuthentication, payload.toString())\r\n          .pipe(map(session => {\r\n              // login successful if there's a jwt token in the response\r\n              if (session && session.token.accessToken) {\r\n                  // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                  localStorage.setItem('session', JSON.stringify(session.token));\r\n                  this.isLoggedIn = true;\r\n              }\r\n              return session;\r\n          }));\r\n  }\r\n\r\n  logout(): void {\r\n    this.isLoggedIn = false;\r\n    // remove user from local storage to log user out\r\n    localStorage.clear();\r\n  }\r\n\r\n  b64EncodeUnicode(str: any) {\r\n    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,\r\n      // function toSolidBytes(match, p1) {\r\n      (match, p1) => {\r\n        // console.debug('match: ' + match);\r\n        return String.fromCharCode((\"0x\" + p1) as any);\r\n    }));\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"login-container\">\n  <div class=\"column column-double\">\n    <div class=\"login-container\">\n      <div class=\"white-text center-text centered-box column\">\n        <div>\n          <h1 class=\"visionpi-title-large\">VisionPI</h1>\n          <h3 class=\"visionpi-title-medium\" i18n>Your security solution!</h3>\n        </div>\n      </div>\n      <div class=\"column-gray center-text centered-box column\">\n        <div class=\"login-form\">\n          <h4 class=\"visionpi-title-small\" i18n>Welcome!</h4>\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit(loginForm.value)\" >\n            <input matInput placeholder=\"Username\" formControlName=\"username\" class=\"login-input\">\n            <input matInput placeholder=\"Enter your password\" [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\" class=\"login-input\">\n            <button mat-stroked-button color=\"accent\" class=\"white-text button\" i18n>Log in</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<!--<div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n\n  <mat-card class=\"box\">\n    <mat-card-header>\n      <mat-card-title>VisionPI</mat-card-title>\n    </mat-card-header>\n\n    <form class=\"example-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit(loginForm.value)\">\n      <mat-card-content>\n        <mat-form-field class=\"example-full-width\">\n          <input matInput placeholder=\"Username\" formControlName=\"username\">\n        </mat-form-field>\n\n        <mat-form-field class=\"example-full-width\">\n          <input matInput placeholder=\"Enter your password\" [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\">\n          <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n          </button>\n        </mat-form-field>\n      </mat-card-content>\n      <button mat-stroked-button color=\"accent\" class=\"btn-block\">Log in</button>\n    </form>\n  </mat-card>\n\n</div>-->\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router,\n         NavigationExtras } from '@angular/router';\nimport { AuthService }      from '../auth.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm;\n  hide = true;\n\n  constructor(private formBuilder: FormBuilder, public authService: AuthService, public router: Router) {\n    this.loginForm = this.formBuilder.group({\n      username: '',\n      password: ''\n    });\n    // remove user from local storage to log user out\n    localStorage.clear();\n  }\n\n  ngOnInit() {\n  }\n\n  onSubmit(loginData) {\n    this.authService.login(loginData.username, loginData.password)\n    .pipe(first())\n    .subscribe(data => {\n      if (this.authService.isLoggedIn) {\n        // Get the redirect URL from our auth service\n        // If no redirect has been set, use the default\n        let redirect = this.authService.redirectUrl ? this.router.parseUrl(this.authService.redirectUrl) : '/home';\n\n        // Set our navigation extras object\n        // that passes on our global query params and fragment\n        let navigationExtras: NavigationExtras = {\n          queryParamsHandling: 'preserve',\n          preserveFragment: true\n        };\n\n        // Redirect the user\n        this.router.navigateByUrl(redirect, navigationExtras);\n      }\n    });\n  }\n\n}\n"],"sourceRoot":"webpack:///","file":"auth-auth-module-ngfactory-es5.js"}