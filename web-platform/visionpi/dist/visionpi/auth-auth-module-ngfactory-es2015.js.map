{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/auth.service.ts","./src/app/auth/login/login.component.html","./src/app/auth/login/login.component.ts"],"names":[],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAuD;AACQ;AAE/D,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,qEAAc,EAAE;CACxC,CAAC;AAMK,MAAM,iBAAiB;CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOlC;AAAA;AAAO,MAAM,UAAU;CAAI;;;;;;;;;;;;;ACjB3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AAEd;AACY;;;AAKtD,MAAM,WAAW;IACtB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QACpC,eAAU,GAAG,KAAK,CAAC;IADqB,CAAC;IAMzC,KAAK,CAAC,QAAgB,EAAE,QAAgB;QACpC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,GAAG,QAAQ,IAAI,QAAQ,EAAE,CAAC,CAAC;QAE9E,MAAM,OAAO,GAAG,IAAI,+DAAU,EAAE;aACf,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC;aAC7B,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC;aACzB,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,qEAAW,CAAC,iBAAiB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC;aACxE,IAAI,CAAC,0DAAG,CAAC,OAAO,CAAC,EAAE;YAChB,0DAA0D;YAC1D,IAAI,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE;gBACtC,kGAAkG;gBAClG,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;aAC1B;YACD,OAAO,OAAO,CAAC;QACnB,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,iDAAiD;QACjD,YAAY,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAED,gBAAgB,CAAC,GAAQ;QACvB,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,iBAAiB;QAC3D,qCAAqC;QACrC,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;YACZ,oCAAoC;YACpC,OAAO,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,GAAG,EAAE,CAAQ,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oGCjDH,oJAA6B,KAC3B,yJAAkC,KAChC,oJAA6B,KAC3B,8KAAwD,KACtD,uHAAK,KACH,uJAAiC,qFAAQ,MACzC,wJAAuC,KANjD,2GAAyB,MASnB,gLAAyD,KACvD,gJAAwB,KACtB,wJAAsC,KAXhD,mFAAW,MAYD;;;;;wBAAsE;MAAxC;;wBAAsC;MAApE,m0BAAsE,IACpE;;;;;;;;;;;;;;;;;;;;;m0EAAsF,IACtF;;;;;;;;;;;;;;;;;;;;;s1EAAqI,IACrI,o2BAAyE,IAfrF,6EAAQ,mDAYQ,mBAAuB,YAA7B,aAAsE,EAAhE,SAAuB,GACY,2BAA0B,EAAjE,aAAsF,EAA/C,UAA0B,GAAjD,2BAAsB,EAAtC,aAAsF,EAAtE,UAAsB,GACgD,2BAA0B,EAAhH,aAAqI,EAA/C,UAA0B,GAAhG,sCAAiC,EAAC,gDAAmC,GAArF,aAAqI,EAArH,UAAiC,EAAC,UAAmC,GAC1D,yBAAc,EAAzC,aAAyE,EAA9C,UAAc,2BAH3C,stBAAsE,GACpE,2sDAAsF,IACtF,+sDAAqI,IACrI,wPAAyE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfrF;AAAA;AAAA;AAAA;AAAkD;AAKX;AAOhC,MAAM,cAAc;IAIzB,YAAoB,WAAwB,EAAS,WAAwB,EAAS,MAAc;QAAhF,gBAAW,GAAX,WAAW,CAAa;QAAS,gBAAW,GAAX,WAAW,CAAa;QAAS,WAAM,GAAN,MAAM,CAAQ;QAFpG,SAAI,GAAG,IAAI,CAAC;QAGV,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACtC,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC;QACH,iDAAiD;QACjD,YAAY,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAED,QAAQ;IACR,CAAC;IAED,QAAQ,CAAC,SAAS;QAChB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC;aAC7D,IAAI,CAAC,4DAAK,EAAE,CAAC;aACb,SAAS,CAAC,IAAI,CAAC,EAAE;YAChB,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE;gBAC/B,6CAA6C;gBAC7C,+CAA+C;gBAC/C,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBAE3G,mCAAmC;gBACnC,sDAAsD;gBACtD,IAAI,gBAAgB,GAAqB;oBACvC,mBAAmB,EAAE,UAAU;oBAC/B,gBAAgB,EAAE,IAAI;iBACvB,CAAC;gBAEF,oBAAoB;gBACpB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;aACvD;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CAEF","file":"auth-auth-module-ngfactory-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent }       from './login/login.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AngularMaterialModule } from '../angular-material/angular-material.module';\nimport { ReactiveFormsModule }    from '@angular/forms';\nimport { LoginComponent } from './login/login.component';\n\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    AuthRoutingModule,\n    AngularMaterialModule,\n    ReactiveFormsModule\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AuthModule { }\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, delay, map } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) { }\r\n  isLoggedIn = false;\r\n\r\n  // store the URL so we can redirect after logging in\r\n  redirectUrl: string;\r\n\r\n  login(username: string, password: string) {\r\n      localStorage.setItem('code', this.b64EncodeUnicode(`${username}:${password}`))\r\n\r\n      const payload = new HttpParams()\r\n                      .set('grant_type', 'password')\r\n                      .set('username', username)\r\n                      .set('password', password);\r\n      return this.http.post<any>(environment.apiAuthentication, payload.toString())\r\n          .pipe(map(session => {\r\n              // login successful if there's a jwt token in the response\r\n              if (session && session.token.accessToken) {\r\n                  // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                  localStorage.setItem('session', JSON.stringify(session.token));\r\n                  this.isLoggedIn = true;\r\n              }\r\n              return session;\r\n          }));\r\n  }\r\n\r\n  logout(): void {\r\n    this.isLoggedIn = false;\r\n    // remove user from local storage to log user out\r\n    localStorage.clear();\r\n  }\r\n\r\n  b64EncodeUnicode(str: any) {\r\n    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,\r\n      // function toSolidBytes(match, p1) {\r\n      (match, p1) => {\r\n        // console.debug('match: ' + match);\r\n        return String.fromCharCode((\"0x\" + p1) as any);\r\n    }));\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"login-container\">\n  <div class=\"column column-double\">\n    <div class=\"login-container\">\n      <div class=\"white-text center-text centered-box column\">\n        <div>\n          <h1 class=\"visionpi-title-large\">VisionPI</h1>\n          <h3 class=\"visionpi-title-medium\" i18n>Your security solution!</h3>\n        </div>\n      </div>\n      <div class=\"column-gray center-text centered-box column\">\n        <div class=\"login-form\">\n          <h4 class=\"visionpi-title-small\" i18n>Welcome!</h4>\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit(loginForm.value)\" >\n            <input matInput placeholder=\"Username\" formControlName=\"username\" class=\"login-input\">\n            <input matInput placeholder=\"Enter your password\" [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\" class=\"login-input\">\n            <button mat-stroked-button color=\"accent\" class=\"white-text button\" i18n>Log in</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<!--<div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n\n  <mat-card class=\"box\">\n    <mat-card-header>\n      <mat-card-title>VisionPI</mat-card-title>\n    </mat-card-header>\n\n    <form class=\"example-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit(loginForm.value)\">\n      <mat-card-content>\n        <mat-form-field class=\"example-full-width\">\n          <input matInput placeholder=\"Username\" formControlName=\"username\">\n        </mat-form-field>\n\n        <mat-form-field class=\"example-full-width\">\n          <input matInput placeholder=\"Enter your password\" [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\">\n          <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n          </button>\n        </mat-form-field>\n      </mat-card-content>\n      <button mat-stroked-button color=\"accent\" class=\"btn-block\">Log in</button>\n    </form>\n  </mat-card>\n\n</div>-->\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router,\n         NavigationExtras } from '@angular/router';\nimport { AuthService }      from '../auth.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm;\n  hide = true;\n\n  constructor(private formBuilder: FormBuilder, public authService: AuthService, public router: Router) {\n    this.loginForm = this.formBuilder.group({\n      username: '',\n      password: ''\n    });\n    // remove user from local storage to log user out\n    localStorage.clear();\n  }\n\n  ngOnInit() {\n  }\n\n  onSubmit(loginData) {\n    this.authService.login(loginData.username, loginData.password)\n    .pipe(first())\n    .subscribe(data => {\n      if (this.authService.isLoggedIn) {\n        // Get the redirect URL from our auth service\n        // If no redirect has been set, use the default\n        let redirect = this.authService.redirectUrl ? this.router.parseUrl(this.authService.redirectUrl) : '/home';\n\n        // Set our navigation extras object\n        // that passes on our global query params and fragment\n        let navigationExtras: NavigationExtras = {\n          queryParamsHandling: 'preserve',\n          preserveFragment: true\n        };\n\n        // Redirect the user\n        this.router.navigateByUrl(redirect, navigationExtras);\n      }\n    });\n  }\n\n}\n"],"sourceRoot":"webpack:///"}